<?php

namespace Fabiang\Xmpp\Connection;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-03 at 01:02:08.
 */
class SocketTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Stream
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $mock         = $this->getMock('\Socket\Raw\Socket', array(), array(), '', false);
        $this->object = new Socket('tcp://localhost:9999', $mock);
    }

    /**
     * Test constructor.
     * 
     * @covers Fabiang\Xmpp\Connection\Socket::__construct
     * @return void
     */
    public function testConstructor()
    {
        $mock = $this->getMock('\Socket\Raw\Socket', array(), array(), '', false);
        $object = new Socket('', $mock);
        $this->assertSame($mock, $object->getSocket());
    }

    /**
     * Test receivding data.
     * 
     * @covers Fabiang\Xmpp\Connection\Socket::receive
     * @return void
     */
    public function testReceive()
    {
        $return = '<xml></xml>';
        $mock = $this->object->getSocket();
        $mock->expects($this->once())
            ->method('read')
            ->with($this->equalTo(1024))
            ->will($this->returnValue($return));
        $this->assertSame($return, $this->object->receive());
    }

    /**
     * Test sending data.
     * 
     * @covers Fabiang\Xmpp\Connection\Socket::send
     * @return void
     */
    public function testSend()
    {
        $data = '<xml></xml>';
        
        $mock = $this->object->getSocket();
        $mock->expects($this->once())
            ->method('write')
            ->with($this->equalTo($data));
        
        $this->object->send($data);
    }
    
    /**
     * Test connecting.
     * 
     * @covers Fabiang\Xmpp\Connection\Socket::connect
     * @covers Fabiang\Xmpp\Connection\Socket::isConnected
     * @return void
     */
    public function testConnect()
    {        
        $mock = $this->object->getSocket();
        $mock->expects($this->once())
            ->method('connect')
            ->with($this->equalTo('tcp://localhost:9999'));
        $this->object->connect();
        $this->assertTrue($this->object->isConnected());
    }
    
    /**
     * Test disconnecting.
     * 
     * @covers Fabiang\Xmpp\Connection\Socket::disconnect
     * @covers Fabiang\Xmpp\Connection\Socket::isConnected
     * @return void
     */
    public function testDisconnect()
    {        
        $mock = $this->object->getSocket();
        $mock->expects($this->once())
            ->method('connect')
            ->with($this->equalTo('tcp://localhost:9999'));
        $this->object->connect();
        $this->assertTrue($this->object->isConnected());
        
        $mock = $this->object->getSocket();
        $mock->expects($this->once())
            ->method('close');
        $this->object->disconnect();
        $this->assertFalse($this->object->isConnected());
    }

    /**
     * @covers Fabiang\Xmpp\Connection\Socket::getSocket
     * @covers Fabiang\Xmpp\Connection\Socket::setSocket
     * @return void
     */
    public function testSetAndGetSocket()
    {
        $socket = new \Socket\Raw\Socket('tcp://localhost:9999');
        $this->assertSame($socket, $this->object->setSocket($socket)->getSocket());
    }

}
