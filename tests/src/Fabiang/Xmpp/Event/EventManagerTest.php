<?php

namespace Fabiang\Xmpp\Event;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-31 at 19:16:20.
 */
class EventManagerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var EventManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = new EventManager;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {

    }

    /**
     * Test attaching events.
     *
     * @covers Fabiang\Xmpp\Event\EventManager::attach
     * @covers Fabiang\Xmpp\Event\EventManager::getEventList
     * @return void
     */
    public function testAttach()
    {
        $this->object->attach('foo', function() {});
        $this->assertEquals(
            array('*' => array(), 'foo' => array(function() {})),
            $this->object->getEventList()
        );
        $this->object->attach('foo', function() {});
        $this->assertEquals(
            array('*' => array(), 'foo' => array(function() {}, function() {})),
            $this->object->getEventList()
        );
    }

    /**
     * Test attaching callback only once.
     *
     * @covers Fabiang\Xmpp\Event\EventManager::attach
     * @covers Fabiang\Xmpp\Event\EventManager::getEventList
     * @return void
     */
    public function testAttachDublicates()
    {
        $callback = function() {

        };
        $this->object->attach('foo', $callback);
        $this->assertSame(array('*' => array(), 'foo' => array($callback)), $this->object->getEventList());
        $this->object->attach('foo', $callback);
        $this->assertSame(array('*' => array(), 'foo' => array($callback)), $this->object->getEventList());
    }

    /**
     * Test that happens when no valid callback is passwd to attach method.
     *
     * @covers Fabiang\Xmpp\Event\EventManager::attach
     * @expectedException \Fabiang\Xmpp\Exception\InvalidArgumentException
     * @return void
     */
    public function testAttachInvalidCallback()
    {
        $this->object->attach('foo', array());
    }

    /**
     * Test triggering events.
     *
     * @covers Fabiang\Xmpp\Event\EventManager::trigger
     * @return void
     */
    public function testTrigger()
    {
        $eventObject      = null;
        $previousListener = function() {};

        $this->object->attach('foo', $previousListener);
        $this->object->attach('foo', function ($event) use(&$eventObject) {
            $eventObject = $event;
        });
        $this->object->trigger('foo', new \stdClass, array(1, 2, 3));

        $this->assertSame('foo', $eventObject->getName());
        $this->assertInstanceof('stdClass', $eventObject->getTarget());
        $this->assertSame(array(1, 2, 3), $eventObject->getParameters());
        $this->assertSame(array($previousListener), $eventObject->getEventStack());
    }

    /**
     * Test triggering wildcard listeners.
     *
     * @covers Fabiang\Xmpp\Event\EventManager::trigger
     * @return void
     */
    public function testTriggerWildcard()
    {
        $eventObject = null;
        $this->object->attach('*', function ($event) use(&$eventObject) {
            $eventObject = $event;
        });
        $this->object->trigger('foo', new \stdClass, array(1, 2, 3));
        $this->assertNotNull($eventObject);
    }

    /**
     * Test triggering events.
     *
     * @covers Fabiang\Xmpp\Event\EventManager::trigger
     * @return void
     */
    public function testTriggerNoCallbacksAttached()
    {
        $eventObject = null;
        $this->object->attach('foo', function ($event) use(&$eventObject) {
            $eventObject = $event;
        });
        $this->object->trigger('bar', new \stdClass, array(1, 2, 3));

        $this->assertNull($eventObject);
    }

    /**
     * Test setting and getting event object.
     *
     * @covers Fabiang\Xmpp\Event\EventManager::getEventObject
     * @covers Fabiang\Xmpp\Event\EventManager::setEventObject
     * @return void
     */
    public function testSetAndGetEventObject()
    {
        $eventObject = new Event;
        $this->assertSame($eventObject, $this->object->setEventObject($eventObject)->getEventObject());
    }

    /**
     * Test constructor.
     *
     * @covers Fabiang\Xmpp\Event\EventManager::__construct
     * @return void
     */
    public function testConstructor()
    {
        $object = new EventManager;
        $this->assertInstanceOf('\\Fabiang\\Xmpp\\Event\\Event', $object->getEventObject());

        $eventObject = new Event;
        $object      = new EventManager($eventObject);
        $this->assertSame($eventObject, $object->getEventObject());
    }

}
