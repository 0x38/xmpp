<?php

namespace Fabiang\Xmpp\EventListener\Stream;

use Fabiang\Xmpp\Event\XMLEvent;
use Fabiang\Xmpp\Connection\Test;
use Fabiang\Xmpp\Options;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-11 at 18:20:16.
 */
class StreamTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Stream
     */
    protected $object;

    /**
     *
     * @var Test
     */
    protected $connection;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object     = new Stream;
        $this->connection = new Test;
        $options          = new Options;
        $options->setConnection($this->connection);
        $this->object->setOptions($options);
        $this->connection->setReady(true);
    }

    /**
     * Test what event are attached.
     *
     * @covers Fabiang\Xmpp\EventListener\Stream\Stream::attachEvents
     * @return void
     */
    public function testAttachEvents()
    {
        $this->object->attachEvents();

        $output = $this->connection->getOutputStream()->getEventManager();
        $input  = $this->connection->getInputStream()->getEventManager();
        $this->assertArrayHasKey('{http://etherx.jabber.org/streams}stream', $output->getEventList());
        $this->assertArrayHasKey('{http://etherx.jabber.org/streams}features', $input->getEventList());
    }

    /**
     * Test starting client stream.
     *
     * @covers Fabiang\Xmpp\EventListener\Stream\Stream::stream
     * @covers Fabiang\Xmpp\EventListener\Stream\Stream::streamServer
     * @covers Fabiang\Xmpp\EventListener\Stream\Stream::features
     * @covers Fabiang\Xmpp\EventListener\Stream\Stream::isBlocking
     * @return void
     */
    public function testEvents()
    {
        $element = new \DOMElement('machanism', 'PLAIN');
        $event   = new XMLEvent;
        $event->setParameters(array($element));
        $this->connection->setReady(false);

        $this->assertFalse($this->object->isBlocking());
        $event->setStartTag(true);
        $this->object->stream($event);
        $this->assertTrue($this->object->isBlocking());

        $event->setStartTag(false);
        $this->object->streamServer($event);
        $this->assertFalse($this->object->isBlocking());

        $event->setStartTag(true);
        $this->object->stream($event);
        $event->setStartTag(false);
        $this->object->features();
        $this->assertFalse($this->object->isBlocking());
        $this->assertTrue($this->connection->isReady());
    }

}
