<?php

namespace Fabiang\Xmpp\EventListener\Stream;

use Fabiang\Xmpp\Connection\Test;
use Fabiang\Xmpp\Options;
use Fabiang\Xmpp\Event\XMLEvent;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-17 at 14:16:00.
 */
class StartTlsTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var StartTls
     */
    protected $object;

    /**
     * 
     * @var Test
     */
    protected $connection;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * 
     * @return void
     */
    protected function setUp()
    {
        $this->object     = new StartTls;
        $this->connection = new Test;

        $options = new Options;
        $options->setConnection($this->connection);
        $this->object->setOptions($options);
        $this->connection->setReady(true);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     * 
     * @return void
     */
    protected function tearDown()
    {
        
    }

    /**
     * Test attaching events.
     * 
     * @covers Fabiang\Xmpp\EventListener\Stream\StartTls::attachEvents
     * @return void
     */
    public function testAttachEvents()
    {
        $this->object->attachEvents();
        $this->assertSame(
            array(
                '*'                                         => array(),
                '{urn:ietf:params:xml:ns:xmpp-tls}starttls' => array(array($this->object, 'starttls')),
                '{urn:ietf:params:xml:ns:xmpp-tls}proceed'  => array(array($this->object, 'proceed'))
            ),
            $this->connection->getInputStream()->getEventManager()->getEventList()
        );
    }

    /**
     * Test starttls event.
     * 
     * @covers Fabiang\Xmpp\EventListener\Stream\StartTls::starttls
     * @covers Fabiang\Xmpp\EventListener\Stream\StartTls::isBlocking
     * @return void
     */
    public function testStarttls()
    {
        $element = new \DOMElement('starttls');
        $event   = new XMLEvent;
        $event->setParameters(array($element));
        
        $this->object->getOptions()->getConnection()->setReady(true);
        
        $connection = $this->object->getOptions()->getConnection();
        
        $this->object->starttls($event);
        $this->assertTrue($this->object->isBlocking());
        $this->assertFalse($connection->isReady());
        $this->assertContains('<starttls xmlns="urn:ietf:params:xml:ns:xmpp-tls"/>', $connection->getBuffer());
    }

    /**
     * Test proceed event.
     * 
     * @covers Fabiang\Xmpp\EventListener\Stream\StartTls::proceed
     * @depends testStarttls
     * @return void
     */
    public function testProceed()
    {
        $element = new \DOMElement('proceed');
        $event   = new XMLEvent;
        $event->setParameters(array($element));
        
        $connection = $this->object->getOptions()->getConnection();
        
        $this->object->proceed($event);
        
        $this->assertFalse($this->object->isBlocking());
        $this->assertTrue($connection->isConnected());
    }

}
