<?php

namespace Fabiang\Xmpp\EventListener;

use Fabiang\Xmpp\Event\XMLEvent;
use Fabiang\Xmpp\Connection\Test;
use Fabiang\Xmpp\Event\EventManager;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-11 at 18:29:57.
 */
class AuthenticationTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Authentication
     */
    protected $object;
    
    /**
     * 
     * @var Test
     */
    protected $connection;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = new Authentication;
        $this->connection = new Test;
        $this->object->setConnection($this->connection);
        $this->connection->setReady(true);
    }

    /**
     * Test what events are attached.
     *
     * @covers Fabiang\Xmpp\EventListener\Authentication::attachEvents
     * @return void
     */
    public function testAttachEvents()
    {
        $connection = new Test();
        $this->object->setConnection($connection);
        $this->object->attachEvents();
        
        $input = $connection->getInputStream()->getEventManager();
        $this->assertArrayHasKey('{urn:ietf:params:xml:ns:xmpp-sasl}mechanisms', $input->getEventList());
        $this->assertArrayHasKey('{urn:ietf:params:xml:ns:xmpp-sasl}mechanism', $input->getEventList());
    }

    /**
     * Test collecting machanisms from event.
     *
     * @covers Fabiang\Xmpp\EventListener\Authentication::collectMechanisms
     * @covers Fabiang\Xmpp\EventListener\Authentication::getMechanisms
     * @covers Fabiang\Xmpp\EventListener\Authentication::isBlocking
     * @return void
     */
    public function testCollectMechanisms()
    {        
        $element = new \DOMElement('machanism', 'PLAIN');
        $event   = new XMLEvent;
        $event->setParameters(array($element));
        $this->object->collectMechanisms($event);
        $this->assertSame(array('plain'), $this->object->getMechanisms());
        
        $element = new \DOMElement('machanism', 'DIGEST-MD5');
        $event->setParameters(array($element));
        $this->object->collectMechanisms($event);
        $this->assertSame(array('plain', 'digest-md5'), $this->object->getMechanisms());

        $this->assertTrue($this->object->isBlocking());
    }

    /**
     * Test authentication.
     * 
     * @covers Fabiang\Xmpp\EventListener\Authentication::authenticate
     * @return void
     */
    public function testAuthenticate()
    {        
        $this->object->setEventManager(new EventManager)
            ->setUsername('aaa')
            ->setPassword('bbb');
        
        $element = new \DOMElement('machanism', 'PLAIN');
        $event   = new XMLEvent;
        $event->setParameters(array($element));
        $this->object->collectMechanisms($event);
        
        $element = new \DOMElement('mechanisms');
        $event   = new XMLEvent;
        $event->setParameters(array($element));

        $this->object->authenticate($event);
        $this->assertContains(
            '<auth xmlns="urn:ietf:params:xml:ns:xmpp-sasl" mechanism="PLAIN">AGFhYQBiYmI=</auth>',
            $this->connection->getBuffer()
        );
    }
    
    /**
     * Test authentication when no mechanisms where collected.
     * 
     * @covers Fabiang\Xmpp\EventListener\Authentication::authenticate
     * @expectedException \Fabiang\Xmpp\Exception\RuntimeException
     * @expectedExceptionMessage No supportet authentication machanism found.
     * @return void
     */
    public function testAuthenticateWithoutMachanism()
    {
        $element = new \DOMElement('mechanisms');
        $event   = new XMLEvent;
        $event->setParameters(array($element));

        $this->object->authenticate($event);
    }
    
    /**
     * Test authentication when mechanism class is invalid instance.
     * 
     * @covers Fabiang\Xmpp\EventListener\Authentication::authenticate
     * @expectedException \Fabiang\Xmpp\Exception\RuntimeException
     * @return void
     */
    public function testAuthenticateInvalidMechanismHandler()
    {
        $this->object->setAuthenticationClasses(array('plain' => '\stdClass'));
        
        $element = new \DOMElement('machanism', 'PLAIN');
        $event   = new XMLEvent;
        $event->setParameters(array($element));
        $this->object->collectMechanisms($event);
        
        $element = new \DOMElement('mechanisms');
        $event   = new XMLEvent;
        $event->setParameters(array($element));

        $this->object->authenticate($event);
    }
    
    /**
     * Test authentication failure.
     * 
     * @covers Fabiang\Xmpp\EventListener\Authentication::failure
     * @expectedException Fabiang\Xmpp\Exception\StreamErrorException
     * @return void
     */
    public function testFailure()
    {
        $document = new \DOMDocument;
        $element = new \DOMElement('failure');
        $document->appendChild($element);
        $event   = new XMLEvent;
        $event->setParameters(array($element));
        
        try {
            $this->object->failure($event);
        } catch (\Fabiang\Xmpp\Exception\StreamErrorException $e) {
            $this->assertFalse($this->object->isBlocking());
            $this->assertSame('<failure/>', $e->getContent());
            throw $e;
        }
    }
    
    /**
     * Test successful authentication.
     * 
     * @covers Fabiang\Xmpp\EventListener\Authentication::success
     * @return void
     */
    public function testSuccess()
    {
        $element = new \DOMElement('success');
        $event   = new XMLEvent;
        $event->setParameters(array($element));
        
        $connection = $this->getMock('\Fabiang\Xmpp\Connection\Test', array());
        $this->object->setConnection($connection);
        
        $connection->expects($this->once())
            ->method('resetStreams');
        $connection->expects($this->once())
            ->method('connect');
        
        $this->object->success($event);
        $this->assertFalse($this->object->isBlocking());
    }

    /**
     * @covers Fabiang\Xmpp\EventListener\Authentication::getAuthenticationClasses
     * @covers Fabiang\Xmpp\EventListener\Authentication::setAuthenticationClasses
     * @return void
     */
    public function testSetAndGetAuthenticationClasses()
    {
        $classes = array('plain' => '\stdClass');
        $this->assertSame($classes, $this->object->setAuthenticationClasses($classes)->getAuthenticationClasses());
    }
    
    /**
     * Test setting username and password.
     * 
     * @covers Fabiang\Xmpp\EventListener\Authentication::__construct
     * @covers Fabiang\Xmpp\EventListener\Authentication::setUsername
     * @covers Fabiang\Xmpp\EventListener\Authentication::getUsername
     * @covers Fabiang\Xmpp\EventListener\Authentication::setPassword
     * @covers Fabiang\Xmpp\EventListener\Authentication::getPassword
     * @return void
     */
    public function testUsernameAndPassword()
    {
        $object = new Authentication('myusername', 'mypassword');
        $this->assertSame('myusername', $object->getUsername());
        $this->assertSame('mypassword', $object->getPassword());
    }

}
