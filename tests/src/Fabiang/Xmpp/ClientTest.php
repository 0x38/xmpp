<?php

namespace Fabiang\Xmpp;

use Fabiang\Xmpp\Options;
use Fabiang\Xmpp\Protocol\DefaultImplementation;
use Fabiang\Xmpp\Event\EventManager;
use Fabiang\Xmpp\Connection\Test;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-17 at 10:05:30.
 */
class ClientTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Client
     */
    protected $object;

    /**
     *
     * @var Options
     */
    protected $options;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $options = new Options;
        $options->setImplementation(new DefaultImplementation);

        $this->object  = new Client($options);
        $this->options = $options;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        
    }

    /**
     * Test constructor.
     *
     * @covers Fabiang\Xmpp\Client::__construct
     * @covers Fabiang\Xmpp\Client::setupImplementation
     * @return void
     */
    public function testConstructor()
    {
        $connection     = $this->object->getOptions()->getConnection();
        $eventManager   = $this->object->getEventManager();
        $implementation = $this->object->getOptions()->getImplementation();
        $this->assertInstanceOf(__NAMESPACE__ . '\\Connection\\Socket', $connection);
        $this->assertSame($connection->getEventManager(), $eventManager);

        $eventList = $eventManager->getEventList();
        $this->assertArrayHasKey('logger', $eventList);
        $this->assertInstanceOf('\Fabiang\Xmpp\EventListener\Logger', $eventList['logger'][0][0]);
        $this->assertSame('event', $eventList['logger'][0][1]);

        $this->assertSame($implementation->getEventManager(), $eventManager);
    }

    /**
     * Test connection.
     * 
     * @covers Fabiang\Xmpp\Client::connect
     * @covers Fabiang\Xmpp\Client::getConnection
     * @return void
     */
    public function testConnect()
    {
        $this->options->setConnection(new Test);
        $this->object->connect();
        $this->assertTrue($this->options->getConnection()->isConnected());
    }

    /**
     * Test disconnecting.
     * 
     * @covers Fabiang\Xmpp\Client::disconnect
     * @depends testConnect
     * @return void
     */
    public function testDisconnect()
    {
        $this->object->disconnect();
        $this->assertFalse($this->options->getConnection()->isConnected());
    }

    /**
     * Test sending data.
     * 
     * @covers Fabiang\Xmpp\Client::send
     * @return void
     */
    public function testSend()
    {
        $connection = new Test;
        $this->options->setConnection($connection);
        $this->object->send(new Protocol\Message);
        $this->assertContains('', $connection->getBuffer());
    }

    /**
     * Test setting and getting event manager.
     *
     * @covers Fabiang\Xmpp\Client::getEventManager
     * @covers Fabiang\Xmpp\Client::setEventManager
     * @return void
     */
    public function testSetAndGetEventManager()
    {
        $this->assertInstanceOf('\Fabiang\Xmpp\Event\EventManager', $this->object->getEventManager());
        $eventManager = new EventManager;
        $this->assertSame($eventManager, $this->object->setEventManager($eventManager)->getEventManager());
    }

    /**
     * Test getting options object.
     * 
     * @covers Fabiang\Xmpp\Client::getOptions
     * @return void
     */
    public function testGetOptions()
    {
        $this->assertSame($this->options, $this->object->getOptions());
    }

}
